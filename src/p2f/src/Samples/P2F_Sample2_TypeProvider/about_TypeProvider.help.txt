TOPIC
    Type Provider Example Project

COPYRIGHT
	Copyright (c) 2014 Code Owls LLC

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"),
	to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense,
	and/or sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

DESCRIPTION
    The Type Provider demonstrates the minimum work necessary to create a
	PowerShell navigation provider using the Code Owls PowerShell Provider
	Framework (P2F).  This provider allows the user to explore the assemblies
	and types currently loaded in their powershell session as if they were a
	filesystem.  The P2F enables all of this functionality in just over 100
	lines of code.

	The project produces a dll that contains a single provider (Types)
	and exposes a single default drive (types:).  The provider supports:
	* heirarchical navigation (set-location)
	* enumeration (get-childitem)
	* item query and retrieval (get-item)
	* drive and provider info (get-psdrive, get-psprovider)

	Other cmdlets and operations (such as new-item) are not implemented.

BUILD PREREQUISITES
	* Visual Studio 2010
	* .NET 3.5
	* Postsharp 2.0 (in the lib folder)

PROJECT NOTES
	For an overview of the P2F, see the NullProvider example.

	SUPPORTING ITEM HEIRARCHY

	The Type provider supports a heirarchy of items in the types:
	drive.  The root node of the drive represents the current
	.NET AppDomain; this node contains one child item for each
	assembly currently loaded in the AppDomain.  These assembly child
	items are containers for the types each assembly contains.

	The drive item heirarchy is organized as follows, where text in <>
	represents variable content (such as names of types):

	types:/											# AppDomain
	-------<assembly full name>/					# Assemblies
	----------------------------<type full name>	# Types

	Each level of the heirarchy represents a unique type of path node.  To
	support this heirarchy, the project contains three unique types of
	node factories:

	* AppDomainNodeFactory
	* AssemblyNodeFactory
	* TypeNodeFactory

	The heirarchical relationship between these node factory types is expressed
	by overloading the INodeFactory.GetNodeChildren method.  This method is
	used by P2F to identify the child node factories for the current path node.

	For example, the AppDomainNodeFactory implementation of GetNodeChildren
	returns one AssemblyNodeFactory for every assembly loaded in the current
	AppDomain.  In turn, each AssemblyNodeFactory will return one
	TypeNodeFactory for each public type contained in the assembly.

	The order in which the child node factories are returned will be the order
	they are listed in PowerShell (assuming no ordering is done on the
	pipeline).

RUNNING / DEBUGGING THE PROJECT
	1. Open the project properties
	2. Go to the Debug tab
	3. Change the start action to external program
	4. Set the external program to your powershell path.  E.g.:
		C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	5. Build and Run.  A PowerShell window should open with the
		current path set to the output directory for the project.
	6. Enter the following command to load the provider dll:
		ls provider*.dll | import-module
	7. Verify the provider is loaded using the get-psprovider
		cmdlet.

EXAMPLES
    -------------------------- EXAMPLE 1 --------------------------

    C:\PS>cd types:


    Description
    -----------
    This command changes the current session location to the types: drive
	defined by the Types provider example.


	-------------------------- EXAMPLE 2 --------------------------

    C:\PS>ls types:/


    Description
    -----------
    This command enumerates all items stored in the root of the types: drive.
	This will return all assemblies currently loaded in the PowerShell session.


	-------------------------- EXAMPLE 3 --------------------------

    C:\PS>get-item types:/ | get-member


    Description
    -----------
    This command retrieves the item at the root of the types: drive, passing
	the item to the get-member cmdlet to retrieve type information.  Note that
	the type of the root node is an AppDomain instance.


	-------------------------- EXAMPLE 4 --------------------------

    C:\PS>ls types:/*codeowls*


    Description
    -----------
    This command retrieves all loaded assemblies whose full name contains the
	text 'codeowls'.

	-------------------------- EXAMPLE 5 --------------------------

    C:\PS>cd types:/CodeOwls.PowerShell.Paths
    Types:\CodeOwls.PowerShell.Paths>ls

    Description
    -----------
    The first command changes the current session location to the CodeOwls.PowerShell.Paths assembly.
	The second command lists all public types defined in the CodeOwls.PowerShell.Paths assembly.


	-------------------------- EXAMPLE 6 --------------------------

    C:\PS>ls types:/ -recurse -include *new* | select Name,Assembly

    Description
    -----------
    This command finds all loaded assemblies and types with full names containing the string 'new'.
	The type and assembly name are output to the shell.


SEE ALSO
	http://msdn.microsoft.com/en-us/library/windows/desktop/ee126192%28v=vs.85%29.aspx
	http://psqlite.codeplex.com/
	http://o.codeplex.com/
	http://studioshell.codeplex.com/
